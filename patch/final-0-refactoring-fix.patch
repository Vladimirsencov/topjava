Index: src/main/java/ru/javawebinar/topjava/web/meal/UserMealRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/meal/UserMealRestController.java	(date 1462403700000)
+++ src/main/java/ru/javawebinar/topjava/web/meal/UserMealRestController.java	(revision )
@@ -7,8 +7,6 @@
 import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
 import ru.javawebinar.topjava.model.UserMeal;
 import ru.javawebinar.topjava.to.UserMealWithExceed;
-import ru.javawebinar.topjava.util.TimeUtil;
-import ru.javawebinar.topjava.web.ExceptionInfoHandler;
 
 import java.net.URI;
 import java.time.LocalDate;
@@ -18,7 +16,7 @@
 
 @RestController
 @RequestMapping(value = UserMealRestController.REST_URL, produces = MediaType.APPLICATION_JSON_VALUE)
-public class UserMealRestController extends AbstractUserMealController implements ExceptionInfoHandler {
+public class UserMealRestController extends AbstractUserMealController {
     public static final String REST_URL = "/rest/profile/meals";
 
     @RequestMapping(value = "/{id}", method = RequestMethod.GET)
Index: src/main/java/ru/javawebinar/topjava/LoggedUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/LoggedUser.java	(date 1462403700000)
+++ src/main/java/ru/javawebinar/topjava/LoggedUser.java	(revision )
@@ -15,6 +15,8 @@
  * Mock implementation
  */
 public class LoggedUser extends org.springframework.security.core.userdetails.User {
+    private static final long serialVersionUID = 1L;
+
     private UserTo userTo;
 
     public LoggedUser(User user) {
Index: src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java	(date 1462403700000)
+++ src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java	(revision )
@@ -8,7 +8,6 @@
 import ru.javawebinar.topjava.LoggedUser;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.to.UserTo;
-import ru.javawebinar.topjava.web.ExceptionInfoHandler;
 
 /**
  * GKislin
@@ -16,7 +15,7 @@
  */
 @RestController
 @RequestMapping(ProfileRestController.REST_URL)
-public class ProfileRestController extends AbstractUserController implements ExceptionInfoHandler {
+public class ProfileRestController extends AbstractUserController {
     public static final String REST_URL = "/rest/profile";
 
     @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/TestUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/TestUtil.java	(date 1462403700000)
+++ src/test/java/ru/javawebinar/topjava/TestUtil.java	(revision )
@@ -1,5 +1,7 @@
 package ru.javawebinar.topjava;
 
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors;
 import org.springframework.test.web.servlet.ResultActions;
 import org.springframework.test.web.servlet.request.RequestPostProcessor;
@@ -25,6 +27,11 @@
 
     public static RequestPostProcessor userHttpBasic(User user) {
         return SecurityMockMvcRequestPostProcessors.httpBasic(user.getEmail(), user.getPassword());
+    }
+
+    public static void authorize(User user) {
+        SecurityContextHolder.getContext().setAuthentication(
+                new UsernamePasswordAuthenticationToken(user.getEmail(), user.getPassword()));
     }
 
     /**
Index: src/main/java/ru/javawebinar/topjava/web/user/AdminAjaxController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/AdminAjaxController.java	(date 1462403700000)
+++ src/main/java/ru/javawebinar/topjava/web/user/AdminAjaxController.java	(revision )
@@ -8,7 +8,6 @@
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.to.UserTo;
 import ru.javawebinar.topjava.util.UserUtil;
-import ru.javawebinar.topjava.web.ExceptionInfoHandler;
 
 import javax.validation.Valid;
 import java.util.List;
@@ -18,7 +17,7 @@
  */
 @RestController
 @RequestMapping("/ajax/admin/users")
-public class AdminAjaxController extends AbstractUserController implements ExceptionInfoHandler {
+public class AdminAjaxController extends AbstractUserController {
 
     @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
     public List<User> getAll() {
Index: src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(date 1462403700000)
+++ src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(revision )
@@ -110,7 +110,7 @@
 
     @Test
     public void testGetAll() throws Exception {
-        TestUtil.print(mockMvc.perform(get(REST_URL).contentType(MediaType.APPLICATION_JSON)
+        TestUtil.print(mockMvc.perform(get(REST_URL)
                 .with(userHttpBasic(ADMIN)))
                 .andExpect(status().isOk())
                 .andExpect(content().contentType(MediaType.APPLICATION_JSON))
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/to/UserTo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/to/UserTo.java	(date 1462403700000)
+++ src/main/java/ru/javawebinar/topjava/to/UserTo.java	(revision )
@@ -10,6 +10,8 @@
 import java.io.Serializable;
 
 public class UserTo implements Serializable {
+    private static final long serialVersionUID = 1L;
+
     protected int id;
 
     @NotEmpty
Index: src/test/java/ru/javawebinar/topjava/web/meal/UserMealRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/meal/UserMealRestControllerTest.java	(date 1462403700000)
+++ src/test/java/ru/javawebinar/topjava/web/meal/UserMealRestControllerTest.java	(revision )
@@ -98,7 +98,7 @@
 
     @Test
     public void testGetAll() throws Exception {
-        mockMvc.perform(get(REST_URL).contentType(MediaType.APPLICATION_JSON)
+        mockMvc.perform(get(REST_URL)
                 .with(userHttpBasic(USER)))
                 .andExpect(status().isOk())
                 .andDo(print())
\ No newline at end of file
Index: src/main/webapp/WEB-INF/web.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/WEB-INF/web.xml	(date 1462403700000)
+++ src/main/webapp/WEB-INF/web.xml	(revision )
@@ -36,17 +36,7 @@
         <url-pattern>/</url-pattern>
     </servlet-mapping>
 
-    <!-- Spring Security -->
     <filter>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
-    </filter>
-    <filter-mapping>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-    <filter>
         <filter-name>encodingFilter</filter-name>
         <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
         <init-param>
@@ -60,6 +50,16 @@
     </filter>
     <filter-mapping>
         <filter-name>encodingFilter</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+    <!-- Spring Security -->
+    <filter>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+    </filter>
+    <filter-mapping>
+        <filter-name>springSecurityFilterChain</filter-name>
         <url-pattern>/*</url-pattern>
     </filter-mapping>
 
Index: src/main/java/ru/javawebinar/topjava/web/meal/UserMealAjaxController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/meal/UserMealAjaxController.java	(date 1462403700000)
+++ src/main/java/ru/javawebinar/topjava/web/meal/UserMealAjaxController.java	(revision )
@@ -8,7 +8,6 @@
 import ru.javawebinar.topjava.model.UserMeal;
 import ru.javawebinar.topjava.to.UserMealTo;
 import ru.javawebinar.topjava.to.UserMealWithExceed;
-import ru.javawebinar.topjava.web.ExceptionInfoHandler;
 
 import javax.validation.Valid;
 import java.time.LocalDate;
@@ -23,7 +22,7 @@
  */
 @RestController
 @RequestMapping(value = "/ajax/profile/meals")
-public class UserMealAjaxController extends AbstractUserMealController implements ExceptionInfoHandler {
+public class UserMealAjaxController extends AbstractUserMealController {
 
     @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
     public List<UserMealWithExceed> getAll() {
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/web/user/RootControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/RootControllerTest.java	(date 1462403700000)
+++ src/test/java/ru/javawebinar/topjava/web/user/RootControllerTest.java	(revision )
@@ -6,8 +6,9 @@
 import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.formLogin;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+import static ru.javawebinar.topjava.TestUtil.authorize;
+import static ru.javawebinar.topjava.UserTestData.ADMIN;
 import static ru.javawebinar.topjava.UserTestData.USER;
 
 /**
@@ -18,18 +19,31 @@
 
     @Test
     public void testUserList() throws Exception {
+        authorize(ADMIN);
         mockMvc.perform(get("/users"))
                 .andDo(print())
-                .andExpect(status().is3xxRedirection())
-                .andExpect(redirectedUrl("http://localhost/login"));
+                .andExpect(status().isOk())
+                .andExpect(view().name("userList"))
+                .andExpect(forwardedUrl("/WEB-INF/jsp/userList.jsp"));
     }
 
     @Test
+    public void testUserListUnAuth() throws Exception {
+        authorize(USER);
+        mockMvc.perform(get("/users"))
+                .andDo(print())
+                .andExpect(status().isOk())
+                .andExpect(view().name("exception/exception"))
+                .andExpect(forwardedUrl("/WEB-INF/jsp/exception/exception.jsp"));
+    }
+
+    @Test
     public void testMealList() throws Exception {
+        authorize(USER);
         mockMvc.perform(get("/meals"))
                 .andDo(print())
-                .andExpect(status().is3xxRedirection())
-                .andExpect(redirectedUrl("http://localhost/login"));
+                .andExpect(view().name("mealList"))
+                .andExpect(forwardedUrl("/WEB-INF/jsp/mealList.jsp"));
     }
 
     @Test
@@ -39,5 +53,4 @@
                 .andExpect(status().is3xxRedirection())
                 .andExpect(redirectedUrl("/meals"));
     }
-
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java	(date 1462403700000)
+++ src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java	(revision )
@@ -5,7 +5,6 @@
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
 import ru.javawebinar.topjava.model.User;
-import ru.javawebinar.topjava.web.ExceptionInfoHandler;
 
 import java.net.URI;
 import java.util.List;
@@ -16,7 +15,7 @@
  */
 @RestController
 @RequestMapping(AdminRestController.REST_URL)
-public class AdminRestController extends AbstractUserController implements ExceptionInfoHandler {
+public class AdminRestController extends AbstractUserController {
     public static final String REST_URL = "/rest/admin/users";
 
     @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
Index: src/main/java/ru/javawebinar/topjava/web/ExceptionInfoHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/ExceptionInfoHandler.java	(date 1462403700000)
+++ src/main/java/ru/javawebinar/topjava/web/ExceptionInfoHandler.java	(revision )
@@ -6,9 +6,7 @@
 import org.springframework.core.annotation.Order;
 import org.springframework.dao.DataIntegrityViolationException;
 import org.springframework.http.HttpStatus;
-import org.springframework.web.bind.annotation.ExceptionHandler;
-import org.springframework.web.bind.annotation.ResponseBody;
-import org.springframework.web.bind.annotation.ResponseStatus;
+import org.springframework.web.bind.annotation.*;
 import ru.javawebinar.topjava.util.exception.ErrorInfo;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
 
@@ -18,35 +16,36 @@
  * User: gkislin
  * Date: 23.09.2014
  */
-public interface ExceptionInfoHandler {
+@ControllerAdvice(annotations = RestController.class)
+public class ExceptionInfoHandler {
     Logger LOG = LoggerFactory.getLogger(ExceptionInfoHandler.class);
 
     @ResponseStatus(HttpStatus.NOT_FOUND)
     @ExceptionHandler(NotFoundException.class)
     @ResponseBody
     @Order(Ordered.HIGHEST_PRECEDENCE)
-    default ErrorInfo handleError(HttpServletRequest req, NotFoundException e) {
-        return logAndGetErrorInfo(req, e);
+    public ErrorInfo handleError(HttpServletRequest req, NotFoundException e) {
+        return logAndGetErrorInfo(req, e, false);
     }
 
     @ResponseStatus(value = HttpStatus.CONFLICT)  // 409
     @ExceptionHandler(DataIntegrityViolationException.class)
     @ResponseBody
     @Order(Ordered.HIGHEST_PRECEDENCE + 1)
-    default ErrorInfo conflict(HttpServletRequest req, DataIntegrityViolationException e) {
-        return logAndGetErrorInfo(req, e);
+    public ErrorInfo conflict(HttpServletRequest req, DataIntegrityViolationException e) {
+        return logAndGetErrorInfo(req, e, true);
     }
 
     @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
     @ExceptionHandler(Exception.class)
     @ResponseBody
     @Order(Ordered.LOWEST_PRECEDENCE)
-    default ErrorInfo handleError(HttpServletRequest req, Exception e) {
-        return logAndGetErrorInfo(req, e);
+    public ErrorInfo handleError(HttpServletRequest req, Exception e) {
+        return logAndGetErrorInfo(req, e, true);
     }
 
-    default ErrorInfo logAndGetErrorInfo(HttpServletRequest req, Exception e) {
-        LOG.error("Exception at request " + req.getRequestURL());
+    public ErrorInfo logAndGetErrorInfo(HttpServletRequest req, Exception e, boolean logException) {
+        LOG.error("Exception at request " + req.getRequestURL(), logException ? e : null);
         return new ErrorInfo(req.getRequestURL(), e);
     }
 }
